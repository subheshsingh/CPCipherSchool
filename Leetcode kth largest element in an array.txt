class Solution {
	
    int LomutoPartition(vector<int> &arr, const int &l, const int &h) {
        int pivot {arr.at(h)};
        int i {l-1};
        for (int j {l}; j <= h-1; ++j) {
            if (arr.at(j) < pivot) {
                ++i;
                swap(arr.at(i), arr.at(j));
            }
        }
        swap(arr.at(i+1), arr.at(h));
        return i+1;  
    }
    
    int KthSmallest(vector<int> &arr, const int &n, const int &k) {
		
        int l {}, h {n-1};
        while (l <= h) {  
            int pivot_index {LomutoPartition(arr, l, h)};
            if (pivot_index == k-1)
                return arr.at(k-1);
            else if (k-1 < pivot_index) 
                h = pivot_index-1;
            else if (pivot_index < k-1)
                l = pivot_index+1;
        }
        return -1; 
    }
    
public:
    int findKthLargest(vector<int>& arr, int k) {
        int n {static_cast<int>(arr.size())};
        k = n - k + 1;  
        return KthSmallest(arr, n, k);
    }
};
